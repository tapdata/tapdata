name: Merge Request CI and Nightly Build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "develop", "release-v*.*" ]
  schedule:
    - cron: "0 21 * * *"
  workflow_dispatch:
    inputs:
      testsigma_run:
        description: 'Testsigma run or not'
        required: true
        type: boolean
        default: false
      tapdata_branch:
        description: 'tapdata branch'
        required: true
        type: string
        default: 'develop'

jobs:

  Get-Stable-Branch:
    runs-on: ubuntu-latest
    outputs:
      TAPDATA_BRANCH: ${{ steps.set-output.outputs.TAPDATA_BRANCH }}
      ENTERPRISE_BRANCH: ${{ steps.set-output.outputs.ENTERPRISE_BRANCH }}
      FRONTEND_BRANCH: ${{ steps.set-output.outputs.FRONTEND_BRANCH }}
      TAG_NAME: ${{ steps.set-output.outputs.TAG_NAME }}
    steps:
      - name: Checkout Tapdata Opensource
        uses: actions/checkout@v3
        with:
          repository: 'tapdata/tapdata'
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata
          fetch-depth: 0
      - name: Set Tag
        run: |
          cd tapdata
          main_tag=$(git describe --tags | cut -d '-' -f 1)
          current_timestamp=$(date +%s)
          hex_timestamp=$(printf "%X" "$current_timestamp" | tr 'A-F' 'a-f')
          tag_name="$main_tag-$hex_timestamp"
          echo "TAG_NAME=$tag_name" >> $GITHUB_ENV
      - name: Checkout Tapdata Enterprise Web
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-enterprise-web'
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-enterprise-web
          depth: 0
      - name: Checkout Tapdata Enterpris
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-enterprise'
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-enterprise
          depth: 0
      - name: Checkout Tapdata Application
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-application'
          ref: "main"
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-application
      - name: Get Tapdata Branch Name -- Common
        run: |
          echo "TAPDATA_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Get Tapdata Branch Name -- Pr
        if: github.event_name == 'pull_request'
        run: |
          echo "TAPDATA_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
      - name: Get Tapdata Branch Name -- Workflow Dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "TAPDATA_BRANCH=${{ github.event.inputs.tapdata_branch }}" >> $GITHUB_ENV
      - name: Get Tapdata Branch Name -- Schedule
        if: github.event_name == 'schedule'
        run: |
          echo "TAPDATA_BRANCH=develop" >> $GITHUB_ENV
      - name: Get last stable branch
        id: set-output
        run: |
          cd tapdata-application
          TAPDATA_BRANCH=${{ env.TAPDATA_BRANCH }}
          ENTERPRISE_BRANCH="develop"
          FRONTEND_BRANCH="develop"
          echo "::set-output name=TAPDATA_BRANCH::${TAPDATA_BRANCH}"
          echo "::set-output name=ENTERPRISE_BRANCH::${ENTERPRISE_BRANCH}"
          echo "::set-output name=FRONTEND_BRANCH::${FRONTEND_BRANCH}"
          echo "::set-output name=TAG_NAME::${TAG_NAME}"

  Push-Code-To-GOGS:
    runs-on: ubuntu-latest
    needs: Get-Stable-Branch
    steps:
      - name: Checkout Tapdata Code
        uses: actions/checkout@v3
        with:
          repository: 'tapdata/tapdata'
          ref: ${{ needs.Get-Stable-Branch.outputs.TAPDATA_BRANCH }}
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata
          fetch-depth: 0
      - name: Checkout Tapdata Application
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-application'
          ref: 'main'
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-application
          fetch-depth: 0
      - name: Push Tapdata to Gogs
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            bash tapdata-application/build/upgrade.sh --upgrade-code=true --upgrade-code-path=tapdata --gogs-project-name=tapdata

  Scan-Tapdata:
    runs-on: office-scan
    if: ${{ !startsWith(github.base_ref, 'release-v') }}
    needs:
      - Get-Stable-Branch
      - Push-Code-To-GOGS
    timeout-minutes: 60
    steps:
      - name: Clean Directory
        run: |
          rm -rf ./*
      - name: Checkout Tapdata Code
        run: |
          export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
          git clone -b ${{ needs.Get-Stable-Branch.outputs.TAPDATA_BRANCH }} ${{ secrets.INTERNAL_REPO }}/tapdata/tapdata.git
          cd tapdata && git fetch --tags
      - name: Patch Maven Dependens
        run: |
          echo "Gotapd8!" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync --delete --password-file=/tmp/rsync.passwd -avz rsync://root@192.168.1.184:873/data/enterprise-temp/tapdata/ /root/.m2/
      - name: Build Tapdata - And Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          update-alternatives --set java /usr/java/jdk-11.0.23/bin/java
          export JAVA_HOME=/usr/java/jdk-11.0.23
          cd tapdata && mvn clean test -T1C -Dmaven.compile.fork=true -P idaas && mvn sonar:sonar \
            -Dsonar.projectKey=tapdata -Dsonar.host.url=${{ secrets.SONAR_HOST }} \
            -Dsonar.login=${{ secrets.SONAR_USER }} -Dsonar.password=${{ secrets.SONAR_PASS }} \
            -Dsonar.branch.name=${{ needs.Get-Stable-Branch.outputs.TAPDATA_BRANCH }}
          update-alternatives --set java /usr/java/jdk1.8.0_361/bin/java
          export JAVA_HOME=/usr/java/jdk1.8.0_361
      - name: Prevent Skip Unittest
        run: |
          cd tapdata
          find ./ -name jacoco | grep iengine
          find ./ -name jacoco | grep manager
      - name: Install Dependens
        run: |
          apt install -y jq
      - name: SonarQube Quality Gate check
        id: sonar
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: tapdata/target/sonar/report-task.txt
      - name: Send SonarQube Quality Gate to Pr Comment
        if: ${{ always() && steps.sonar.outcome == 'failure' }}
        run: |
          cd tapdata/build/ && bash check_sonarqube.sh --project-key=tapdata --branch=${{ needs.Get-Stable-Branch.outputs.TAPDATA_BRANCH }} \
            --sonar-token=${{ secrets.SONAR_TOKEN }} --github-token=${{ secrets.TAPDATA_ENT_CICD_TOKEN }} \
            --repo=tapdata --pr-number=${{ github.event.pull_request.number }}

  Build-And-Deploy:
    runs-on: ubuntu-latest
    needs:
      - Get-Stable-Branch
    outputs:
      IP: ${{ steps.get_ip_port.outputs.IP }}
      PORT: ${{ steps.get_ip_port.outputs.PORT }}
    steps:
      - name: Trigger - Build
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: tapdata
          repo: tapdata-application
          github_token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          workflow_file_name: build-tapdata-op.yaml
          ref: main
          wait_interval: 10
          client_payload: '{"FRONTEND_BRANCH": "${{ needs.Get-Stable-Branch.outputs.FRONTEND_BRANCH }}", "OPENSOURCE_BRANCH": "${{ needs.Get-Stable-Branch.outputs.TAPDATA_BRANCH }}", "ENTERPRISE_BRANCH": "${{ needs.Get-Stable-Branch.outputs.ENTERPRISE_BRANCH }}", "CONNECTORS_BRANCH": "main", "CONNECTORS-OPTIONS": "lightweight", "TAG_NAME": "${{ needs.Get-Stable-Branch.outputs.TAG_NAME }}"}'
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: true
      - name: Trigger - Deploy
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: tapdata
          repo: tapdata-application
          github_token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          workflow_file_name: deploy-tapdata-op.yaml
          ref: main
          wait_interval: 10
          client_payload: '{"TAG_NAME": "${{ needs.Get-Stable-Branch.outputs.TAG_NAME }}", "AUTO_TEST": true}'
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: true
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'tapdata-cloud-cluster'
          location: 'asia-east2'
      - name: Checkout Tapdata Application
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-application'
          ref: "main"
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-application
      - name: Get IP and Port
        id: get_ip_port
        run: |
          bash tapdata-application/build/upgrade.sh --get-ip-port=true --version=${{ needs.Get-Stable-Branch.outputs.TAG_NAME }} --deploy-way=docker-compose
          IP=$(cat .service_ip_port | awk -F':' '{print $1}')
          PORT=$(cat .service_ip_port | awk -F':' '{print $2}')
          echo "::set-output name=IP::$IP"
          echo "::set-output name=PORT::$PORT"

  Functional-Test:
    if: ${{ !startsWith(github.base_ref, 'release-v') && github.event_name == 'pull_request' }}
    runs-on: office-scan
    needs:
      - Build-And-Deploy
      - Get-Stable-Branch
    steps:
      - name: Set Env
        run: |
          echo "IP=${{ needs.Build-And-Deploy.outputs.IP }}" >> $GITHUB_ENV
          echo "PORT=${{ needs.Build-And-Deploy.outputs.PORT }}" >> $GITHUB_ENV
          echo "t-layer3-test-branch=master" >> $GITHUB_ENV
          echo "send-message-to-feishu=n" >> $GITHUB_ENV
          echo "test-case=1" >> $GITHUB_ENV
          echo "exclude-case=8,4.4.2,81.11,81.13,81.14,81.15,81.16,3,5,9,11,81,83,85" >> $GITHUB_ENV
      - name: Fetch Code -- t-layer3-test repo
        run: |
          rm -rf ./t-layer3-test
          export GIT_LFS_SKIP_SMUDGE=1
          export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
          git clone -b ${{ env.t-layer3-test-branch }} --single-branch ssh://git@113.98.206.141:10022/tapdata/t-layer3-test.git
          cd t-layer3-test && git fetch --tags
      - name: Run Functional Test
        run: |
          apt install unixodbc -y
          apt-get install python3.11-dev -y
          cd t-layer3-test
          virtualenv venv && source venv/bin/activate
          pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/
          ./taptest install --test
          if [[ "${{ env.send-message-to-feishu }}" == "y" ]]; then
            ./taptest run -t=${{ env.test-case }} -e=${{ env.exclude-case }} -s=${{ env.IP }}:${{ env.PORT }} -f=ci.config.yaml -z f
          else
            yes n | ./taptest run -t=${{ env.test-case }} -e=${{ env.exclude-case }} -s=${{ env.IP }}:${{ env.PORT }} -f=ci.config.yaml -d -z f
          fi
      

  MRCI:
    runs-on: office-scan
    if: ${{ github.event_name == 'schedule' || inputs.testsigma_run }}
    concurrency:
      group: staging_environment
    timeout-minutes: 120
    needs:
      - Build-And-Deploy
      - Get-Stable-Branch
    steps:
      - name: Set Env
        run: |
          echo "IP=${{ needs.Build-And-Deploy.outputs.IP }}" >> $GITHUB_ENV
          echo "PORT=${{ needs.Build-And-Deploy.outputs.PORT }}" >> $GITHUB_ENV
      - name: Fetch Code - Main Repo
        run: |
          rm -rf tapdata
          export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
          git clone -b ${{ needs.Get-Stable-Branch.outputs.TAPDATA_BRANCH }} --single-branch ${{ secrets.INTERNAL_REPO }}/tapdata/tapdata.git
          cd tapdata && git fetch --tags
      - name: Compile - IEngine And Management
        run: |
          #mvn clean install -DskipTests -P idaas -P not_encrypt -U -T1C
          echo "OK"
      - name: Run - Local Service - Not Schedule
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          bash build/run_smoke_tests.sh --runtimedata="url=http://${{ env.IP }}:${{ env.PORT }}"
      - name: Run - Local Service - Schedule
        if: ${{ github.event_name == 'schedule' || inputs.testsigma_run }}
        run: |
          cd tapdata
          bash build/run_smoke_tests.sh --runtimedata="url=http://${{ env.IP }}:${{ env.PORT }}" --maxtimeinmins=120 --testplanid=724 --pollcount=12
      - name: Print Test Result
        if: ${{ always() }}
        run: |
          cd tapdata
          run_id=`cat ./run_id`
          test_plan_id=`cat ./test_plan_id`
          echo "**TestSigma Test Result Link:**" >> $GITHUB_STEP_SUMMARY
          echo "https://app.testsigma.com/ui/td/results/$test_plan_id/runs/$run_id" >> $GITHUB_STEP_SUMMARY
      - name: Test - Register Test Connector
        run: |
          echo "OK"
      - name: Test - E2E Qucik Test
        run: |
          echo "OK"

  CLOSE_ENV:
    if: ${{ !failure() }}
    runs-on: ubuntu-latest
    needs:
      - MRCI
      - Get-Stable-Branch
      - Functional-Test
    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'tapdata-cloud-cluster'
          location: 'asia-east2'
      - name: Checkout Tapdata Application
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-application'
          ref: "main"
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-application
      - name: Close Test Env
        id: get_ip_port
        run: |
          bash tapdata-application/build/upgrade.sh --delete-env=${{ needs.Get-Stable-Branch.outputs.TAG_NAME }} --delete-env-tag=true
